/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package karkov.ui.showRequest;

import karkov.models.Request;
import karkov.repository.RepositoryRequest;
import karkov.services.ServiceSortPriority;
import karkov.services.ServiceSortTime;

import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;

/**
 *
 * @author blackhawk
 */
public class ShowPanel extends javax.swing.JPanel {

    /**
     * Creates new form ShowPanel
     */
    public ShowPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        showPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        requestTable = new javax.swing.JTable();
        recentButton = new javax.swing.JButton();
        sortPriorityButton1 = new javax.swing.JButton();
        sortTimeButton2 = new javax.swing.JButton();

        showPanel.setBackground(new java.awt.Color(251, 133, 0));

        requestTable.setBackground(new java.awt.Color(33, 158, 188));
        requestTable.setForeground(new java.awt.Color(0, 0, 0));
        requestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Zone", "Apt", "Priority", "Limit time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(requestTable);

        recentButton.setBackground(new java.awt.Color(33, 158, 188));
        recentButton.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        recentButton.setForeground(new java.awt.Color(0, 0, 0));
        recentButton.setText("Sort By Recently");
        recentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recentButtonActionPerformed(evt);
            }
        });

        sortPriorityButton1.setBackground(new java.awt.Color(33, 158, 188));
        sortPriorityButton1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        sortPriorityButton1.setForeground(new java.awt.Color(0, 0, 0));
        sortPriorityButton1.setText("Sort By Priority");
        sortPriorityButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortPriorityButton1ActionPerformed(evt);
            }
        });

        sortTimeButton2.setBackground(new java.awt.Color(33, 158, 188));
        sortTimeButton2.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        sortTimeButton2.setForeground(new java.awt.Color(0, 0, 0));
        sortTimeButton2.setText("Sort By Time");
        sortTimeButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortTimeButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout showPanelLayout = new javax.swing.GroupLayout(showPanel);
        showPanel.setLayout(showPanelLayout);
        showPanelLayout.setHorizontalGroup(
            showPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(showPanelLayout.createSequentialGroup()
                .addGroup(showPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(showPanelLayout.createSequentialGroup()
                        .addContainerGap(830, Short.MAX_VALUE)
                        .addGroup(showPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(recentButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sortTimeButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1))
                .addContainerGap())
            .addGroup(showPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, showPanelLayout.createSequentialGroup()
                    .addContainerGap(1238, Short.MAX_VALUE)
                    .addComponent(sortPriorityButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );
        showPanelLayout.setVerticalGroup(
            showPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(showPanelLayout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addComponent(sortTimeButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(recentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(128, Short.MAX_VALUE))
            .addGroup(showPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(showPanelLayout.createSequentialGroup()
                    .addGap(21, 21, 21)
                    .addComponent(sortPriorityButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(827, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(showPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(showPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void recentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recentButtonActionPerformed
        System.out.println("button");
//        cambiar
        makeSortTable(1);
    }//GEN-LAST:event_recentButtonActionPerformed

    private void sortPriorityButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortPriorityButton1ActionPerformed
        makeSortTable(3);
    }//GEN-LAST:event_sortPriorityButton1ActionPerformed

    private void sortTimeButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortTimeButton2ActionPerformed
        ShowPanel.makeSortTable(2);
    }//GEN-LAST:event_sortTimeButton2ActionPerformed
//    select sort for make
    public static void makeSortTable(int opt){
        int xd = 0;
        boolean time = false;

        if (opt ==1){
            makeTable(RepositoryRequest.getRequestArray());
        } else if (opt==2) {

            if(!time){
                ServiceSortTime.sortByTime();
                time = true;
            }
            makeTable(ServiceSortTime.requestsSortedByTime);
        } else if (opt==3) {

            ServiceSortPriority.sortByPriority();
            makeTable(ServiceSortPriority.requestsSort);
        }
    }
//    make sort
    private static void makeTable(ArrayList<Request> requests){
        try {
            DefaultTableModel model = (DefaultTableModel) requestTable.getModel();
            model.setRowCount(0); // Clear existing rows

//            ArrayList<Request> requests = ;
            if (requests != null) {
                for (Request request : requests) {
                    if (request != null) {
                        model.addRow(new Object[]{
                                request.getId(),
                                request.getZone(),
                                request.getAddress(),
                                request.getPrority(),
                                request.getLimitTime()
                        });
                    }
                }
            }
        } catch (Exception e) {
            // Consider adding proper error logging or user notification here
            System.err.println("Error updating table: " + e.getMessage());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton recentButton;
    private static javax.swing.JTable requestTable;
    private javax.swing.JPanel showPanel;
    private javax.swing.JButton sortPriorityButton1;
    private javax.swing.JButton sortTimeButton2;
    // End of variables declaration//GEN-END:variables
}
